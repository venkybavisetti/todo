{"version":3,"sources":["components/inputBox.js","components/todoTask.js","components/header.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","state","text","inputText","handleChange","bind","handleKeyPress","event","this","setState","target","value","content","keyCode","onEnter","className","onKeyDown","onChange","React","Component","TodoTask","task","onClick","taskDecoration","status","id","Header","header","onEdit","updateHeader","editMode","cloneStructure","structure","map","Todo","list","createTask","updateTask","newList","push","Math","floor","random","Date","now","taskId","find","children","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.123a7863.chunk.js","sourcesContent":["import React from 'react';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: props.inputText || '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ text: event.target.value });\n  }\n\n  handleKeyPress(event) {\n    const content = event.target.value;\n    if (event.keyCode === 13 && content !== '') {\n      this.props.onEnter(event.target.value);\n      this.setState({ text: '' });\n    }\n  }\n\n  render() {\n    return (\n      <input\n        className=\"inputTag\"\n        value={this.state.text}\n        onKeyDown={this.handleKeyPress}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default InputBox;\n","import React from 'react';\n\nconst TodoTask = ({ task, onClick }) => {\n  const taskColor = ['notDone', 'progress', 'done'];\n  const taskDecoration = taskColor[task.status];\n\n  return (\n    <div className={`displayTodoTask ${taskDecoration}`}>\n      <span className=\"statusBox\"></span>\n      <span onClick={() => onClick(task.id)} className=\"text\">\n        {task.text}\n      </span>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","import React from 'react';\nimport InputBox from './inputBox';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { header: 'Todo List', onEdit: false };\n\n    this.updateHeader = this.updateHeader.bind(this);\n    this.editMode = this.editMode.bind(this);\n  }\n\n  updateHeader(text) {\n    this.setState({ header: text, onEdit: false });\n  }\n\n  editMode() {\n    this.setState({ onEdit: true });\n  }\n\n  render() {\n    if (this.state.onEdit)\n      return (\n        <div className=\"header\">\n          <InputBox onEnter={this.updateHeader} inputText={this.state.header} />\n        </div>\n      );\n    return (\n      <div onClick={this.editMode} className=\"header\">\n        {this.state.header}\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport InputBox from './inputBox';\nimport TodoTask from './todoTask';\nimport Header from './header';\nimport './todo.css';\n\nconst generateId = function () {\n  return Math.floor(Math.random() * Date.now());\n};\n\nconst cloneStructure = function (structure) {\n  //JSON.parse(JSON.stringify(structure));\n  return structure.map((task) => ({ ...task }));\n};\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { list: [] };\n\n    this.createTask = this.createTask.bind(this);\n    this.updateTask = this.updateTask.bind(this);\n  }\n\n  createTask(text) {\n    this.setState(({ list }) => {\n      const newList = cloneStructure(list);\n      newList.push({ id: generateId(), text, status: 0 });\n      return { list: newList };\n    });\n  }\n\n  updateTask(taskId) {\n    this.setState(({ list }) => {\n      const newList = cloneStructure(list);\n      const task = newList.find((task) => task.id === taskId);\n      task.status = (task.status + 1) % 3;\n      return { list: newList };\n    });\n  }\n\n  render() {\n    const children = this.state.list.map((task) => (\n      <TodoTask task={task} key={task.id} onClick={this.updateTask} />\n    ));\n\n    return (\n      <div className=\"todo\">\n        <Header />\n        {children}\n        <InputBox onEnter={this.createTask} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './components/Todo.js';\n\nconst App = () => <Todo />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}