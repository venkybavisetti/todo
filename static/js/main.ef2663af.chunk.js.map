{"version":3,"sources":["components/inputBox.js","components/todoItem.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","props","state","value","handleChange","bind","handleKeyPress","event","this","setState","target","content","keyCode","createItem","className","onKeyDown","onChange","React","Component","TodoItem","item","onClick","itemPlace","colorBox","isDone","Todo","list","updateItem","concat","newList","map","children","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOAmCeA,E,kDAhCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,IAEtB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBALL,E,yDAQNE,GACXC,KAAKC,SAAS,CAAEN,MAAOI,EAAMG,OAAOP,U,qCAGvBI,GACb,IAAMI,EAAUJ,EAAMG,OAAOP,MACP,KAAlBI,EAAMK,SAA8B,KAAZD,IAC1BH,KAAKP,MAAMY,WAAWN,EAAMG,OAAOP,OACnCK,KAAKC,SAAS,CAAEN,MAAO,Q,+BAKzB,OACE,2BACEW,UAAU,WACVX,MAAOK,KAAKN,MAAMC,MAClBY,UAAWP,KAAKF,eAChBU,SAAUR,KAAKJ,mB,GA3BAa,IAAMC,WCcdC,EAdE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UAC3BC,EAAWH,EAAKI,OAAS,qBAAuB,wBAChDb,EAAUS,EAAKI,OAAS,sBAAwB,UAEtD,OACE,yBAAKV,UAAU,mBACb,0BAAMA,UAAWS,IACjB,0BAAMF,QAAS,kBAAMA,EAAQC,IAAYR,UAAWH,GACjDS,EAAKT,WCsCCc,G,wDA1Cb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEwB,KAAM,IAErB,EAAKb,WAAa,EAAKA,WAAWR,KAAhB,gBAClB,EAAKsB,WAAa,EAAKA,WAAWtB,KAAhB,gBALD,E,uDAQRM,GACTH,KAAKC,UAAS,kBAAe,CAC3BiB,KADY,EAAGA,KACJE,OAAO,CAAEjB,UAASa,QAAQ,U,iCAI9BF,GACTd,KAAKC,UAAS,YAAe,IACrBoB,EADoB,EAAXH,KACMI,KAAI,SAACV,GAAD,sBAAgBA,MAEzC,OADAS,EAAQP,GAAWE,QAAUK,EAAQP,GAAWE,OACzC,CAAEE,KAAMG,Q,+BAIT,IAAD,OACDE,EAAWvB,KAAKN,MAAMwB,KAAKI,KAAI,SAACV,EAAME,GAAP,OACnC,kBAAC,EAAD,CACEF,KAAMA,EACNY,IAAKV,EACLD,QAAS,EAAKM,WACdL,UAAWA,OAIf,OACE,yBAAKR,UAAU,QACb,yCACCiB,EACD,kBAAC,EAAD,CAAUlB,WAAYL,KAAKK,kB,GArChBI,IAAMC,YCAVe,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ef2663af.chunk.js","sourcesContent":["import React from 'react';\n\nclass InputBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }\n\n  handleKeyPress(event) {\n    const content = event.target.value;\n    if (event.keyCode === 13 && content !== '') {\n      this.props.createItem(event.target.value);\n      this.setState({ value: '' });\n    }\n  }\n\n  render() {\n    return (\n      <input\n        className=\"inputTag\"\n        value={this.state.value}\n        onKeyDown={this.handleKeyPress}\n        onChange={this.handleChange}\n      />\n    );\n  }\n}\n\nexport default InputBox;\n","import React from 'react';\n\nconst TodoItem = ({ item, onClick, itemPlace }) => {\n  const colorBox = item.isDone ? 'doneColor colorBox' : 'notDoneColor colorBox';\n  const content = item.isDone ? 'lineThrough content' : 'content';\n\n  return (\n    <div className=\"displayTodoItem\">\n      <span className={colorBox}></span>\n      <span onClick={() => onClick(itemPlace)} className={content}>\n        {item.content}\n      </span>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport InputBox from './inputBox';\nimport TodoItem from './todoItem';\nimport './todo.css';\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { list: [] };\n\n    this.createItem = this.createItem.bind(this);\n    this.updateItem = this.updateItem.bind(this);\n  }\n\n  createItem(content) {\n    this.setState(({ list }) => ({\n      list: list.concat({ content, isDone: false }),\n    }));\n  }\n\n  updateItem(itemPlace) {\n    this.setState(({ list }) => {\n      const newList = list.map((item) => ({ ...item }));\n      newList[itemPlace].isDone = !newList[itemPlace].isDone;\n      return { list: newList };\n    });\n  }\n\n  render() {\n    const children = this.state.list.map((item, itemPlace) => (\n      <TodoItem\n        item={item}\n        key={itemPlace}\n        onClick={this.updateItem}\n        itemPlace={itemPlace}\n      />\n    ));\n\n    return (\n      <div className=\"todo\">\n        <h1>Todo List</h1>\n        {children}\n        <InputBox createItem={this.createItem} />\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './components/Todo.js';\n\nconst App = () => <Todo />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}